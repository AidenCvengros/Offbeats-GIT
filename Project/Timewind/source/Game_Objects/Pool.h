/*************************************************************************************************/
/*!
\file Pool.h
\author Aiden Cvengros
\par email: ajcvengros\@gmail.com
\date 2024.7.14
\brief
    The pool game object that helps track resources

    Public Functions:
        + FILL
		
	Private Functions:
		+ FILL

Copyright (c) 2023 Aiden Cvengros
*/
/*************************************************************************************************/

#ifndef Syncopatience_Pool_H_
#define Syncopatience_Pool_H_

#pragma once

//-------------------------------------------------------------------------------------------------
// Include Header Files
//-------------------------------------------------------------------------------------------------

// Base include
#include "../Engine/stdafx.h"

// The base game object class
#include "GameObject.h"

//-------------------------------------------------------------------------------------------------
// Forward References
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Constants
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Classes
//-------------------------------------------------------------------------------------------------

/*************************************************************************************************/
/*!
	\brief
		The pool object class
*/
/*************************************************************************************************/
class Pool : public GameObject
{
public:
	//---------------------------------------------------------------------------------------------
	// Public Consts
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Structures
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Variables
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Function Declarations
	//---------------------------------------------------------------------------------------------
	
	/*************************************************************************************************/
	/*!
		\brief
			Constructor for the pool object class

		\param scene
			The scene that this game object is in

		\param pos
			The position of the game object

		\param rot
			The rotation of the game object

		\param sca
			The scale of the game object

		\param maxValue_
			The maximum value of the resource in the pool

		\param overflow_
			Whether the pool value can go over the normal maximum
	*/
	/*************************************************************************************************/
	Pool(glm::vec2 pos, float rot, glm::vec2 sca, float maxValue_, bool overflow_, glm::vec4 color_) :
		GameObject(pos, rot, sca, 60, true, color_),
		maxValue(maxValue_),
		currValue(maxValue_),
		overflow(overflow_) {}
	
	/*************************************************************************************************/
	/*!
		\brief
			Destructor for the game object class
	*/
	/*************************************************************************************************/
	~Pool() {}

	/*************************************************************************************************/
	/*!
		\brief
			Adds the given amount to the pool

		\param addAmount
			The amount to add to the pool

		\return
			How much was added to the pool (for instance will differ from addAmount if it hits max)
	*/
	/*************************************************************************************************/
	float AddToPool(float addAmount);

	/*************************************************************************************************/
	/*!
		\brief
			Subtracts the given amount from the pool

		\param subtractAmount
			The amount to subtract from the pool

		\return
			How much was subtracted from the pool (for instance will differ from subtractAmount if it hits min)
	*/
	/*************************************************************************************************/
	float SubtractFromPool(float subtractAmount);

	/*************************************************************************************************/
	/*!
		\brief
			Return the amount of resources in this pool object

		\return
			The current amount in the pool
	*/
	/*************************************************************************************************/
	float GetPoolValue() { return currValue; }

	/*************************************************************************************************/
	/*!
		\brief
			Return the percentage of the pool that is filled

		\return
			The current ratio of the amount in the pool
	*/
	/*************************************************************************************************/
	float GetPoolRatio() { return currValue / maxValue; }
	
private:
	//---------------------------------------------------------------------------------------------
	// Private Consts
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Private Structures
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Private Variables
	//---------------------------------------------------------------------------------------------
	
	float maxValue;								// The maximum value of the resource
	float currValue;							// The current amount of resource in the pool
	bool overflow;								// Whether the current value can go above the maximum

	//---------------------------------------------------------------------------------------------
	// Private Function Declarations
	//---------------------------------------------------------------------------------------------
};

//-------------------------------------------------------------------------------------------------
// Public Variables
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Functions
//-------------------------------------------------------------------------------------------------

#endif // Syncopatience_Pool_H_
