/*************************************************************************************************/
/*!
\file InputManager.h
\author Aiden Cvengros
\par email: ajcvengros\@gmail.com
\date 2024.2.16
\brief
    Gathers and manages inputs from the window instance
		
	Private Functions:
		+ FILL

Copyright (c) 2023 Aiden Cvengros
*/
/*************************************************************************************************/

#ifndef Syncopatience_InputManager_H_
#define Syncopatience_InputManager_H_

#pragma once

//-------------------------------------------------------------------------------------------------
// Include Header Files
//-------------------------------------------------------------------------------------------------

#include "stdafx.h"

// Includes the base system class, window class, and glfw functions
#include "System.h"

// Includes the map container for tracking input keys
#include <vector>
#include <map>

//-------------------------------------------------------------------------------------------------
// Forward References
//-------------------------------------------------------------------------------------------------

class Window;

//-------------------------------------------------------------------------------------------------
// Public Constants
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Classes
//-------------------------------------------------------------------------------------------------

/*************************************************************************************************/
/*!
	\brief
		InputManager
*/
/*************************************************************************************************/
class InputManager : System
{
public:
	//---------------------------------------------------------------------------------------------
	// Public Consts
	//---------------------------------------------------------------------------------------------
	
	enum class Inputs
	{
		Left,
		Right,
		Up,
		Down,
		Jump,
		Max
	};

	enum class InputStatus
	{
		Off,
		Pressed,
		Held,
		Released,
		Max
	};

	//---------------------------------------------------------------------------------------------
	// Public Structures
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Variables
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Function Declarations
	//---------------------------------------------------------------------------------------------
	
	/*************************************************************************************************/
	/*!
		\brief
			Constructor for the input manager class
			
		\param window_
			The window recieving inputs
	*/
	/*************************************************************************************************/
	InputManager(Window* window_) : window(window_) {}
	
	/*************************************************************************************************/
	/*!
		\brief
			Destructor for FILL class
	*/
	/*************************************************************************************************/
	~InputManager() {}

	/*************************************************************************************************/
	/*!
		\brief
			Initializes the system.
	*/
	/*************************************************************************************************/
	void Init();

	/*************************************************************************************************/
	/*!
		\brief
			Updates the system.

		\param
			The time elapsed since the previous frame.
	*/
	/*************************************************************************************************/
	void Update(double dt);

	/*************************************************************************************************/
	/*!
		\brief
			Draws the system to the screen.
	*/
	/*************************************************************************************************/
	void Draw();

	/*************************************************************************************************/
	/*!
		\brief
			Shuts down the system.
	*/
	/*************************************************************************************************/
	void Shutdown();

	/*************************************************************************************************/
	/*!
		\brief
			Check the status of the given input

		\param input
			The given input

		\return
			The status of the input
	*/
	/*************************************************************************************************/
	InputStatus CheckInputStatus(Inputs input);
	
private:
	//---------------------------------------------------------------------------------------------
	// Private Consts
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Private Structures
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Private Variables
	//---------------------------------------------------------------------------------------------
	
	Window* window;								// The window recieving input
	std::vector<InputStatus> inputTracker;		// Keeps track of the different input and they're statuses
	std::vector<double> timeSincePressed;			// Functions as a buffer by mapping when this button was most recently pressed (doesn't count held)
	std::multimap<Inputs, int> keybinds;		// Holds the different keys that map to a certain input

	//---------------------------------------------------------------------------------------------
	// Private Function Declarations
	//---------------------------------------------------------------------------------------------

	/*************************************************************************************************/
	/*!
		\brief
			Updates the given input status on the tracker

		\param input
			The given input
	*/
	/*************************************************************************************************/
	void UpdateInputStatus(Inputs input);
};

//-------------------------------------------------------------------------------------------------
// Public Variables
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Functions
//-------------------------------------------------------------------------------------------------

#endif // Syncopatience_InputManager_H_
