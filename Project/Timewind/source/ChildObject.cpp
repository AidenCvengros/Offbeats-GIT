/*************************************************************************************************/
/*!
\file ChildObject.cpp
\author Aiden Cvengros
\par email: ajcvengros\@gmail.com
\date 2024.2.16
\brief
    The base class for child game objects

    Functions include:
        + FILL

Copyright (c) 2023 Aiden Cvengros
*/
/*************************************************************************************************/

//-------------------------------------------------------------------------------------------------
// Include Header Files
//-------------------------------------------------------------------------------------------------

#include "ChildObject.h"

#include "cppShortcuts.h"

//-------------------------------------------------------------------------------------------------
// Private Constants
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Declarations
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Private Variables
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Function Declarations
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Private Function Declarations
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Function Definitions
//-------------------------------------------------------------------------------------------------

/*************************************************************************************************/
/*!
	\brief
		Returns the transformation matrix for the game object

	\return
		The game object's transformation matrix
*/
/*************************************************************************************************/
glm::mat4x4 ChildObject::GetTranformationMatrix()
{
	// Adjusts transformation to flip the sprite if facing left
	float directionModifier;
	if (flipWithParent && parentObject->GetIsFacingRight() == true)
	{
		directionModifier = -1;
	}
	else
	{
		directionModifier = 1;
	}

	glm::mat4x4 objectMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(GetPosition(), 0.0f))
		* glm::rotate(glm::mat4(1.0f), glm::radians(GetRotation() * directionModifier), glm::vec3(0.0f, 0.0f, 1.0f))
		* glm::scale(glm::mat4(1.0f), glm::vec3(GetScale().x * directionModifier, GetScale().y, 1.0f));

	// Calculates and returns the transformation matrix
	return objectMatrix * parentObject->GetTranformationMatrix();
}

//-------------------------------------------------------------------------------------------------
// Private Function Definitions
//-------------------------------------------------------------------------------------------------
