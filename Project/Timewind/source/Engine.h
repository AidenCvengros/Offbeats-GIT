/*************************************************************************************************/
/*!
\file Engine.h
\author Aiden Cvengros
\par email: ajcvengros\@gmail.com
\date 2023.9.7
\brief
    Creates and manages the game engine

    Public Functions:
        + Engine::createEngine
		+ Engine::~Engine
		+ Engine::Init
		+ Engine::Update
		+ Engine::Draw
		+ Engine::Shutdown

	Private Functions:
		+ Engine::Engine

Copyright (c) 2023 Aiden Cvengros
*/
/*************************************************************************************************/

#ifndef Syncopatience_Engine_H_
#define Syncopatience_Engine_H_

#pragma once

//-------------------------------------------------------------------------------------------------
// Include Header Files
//-------------------------------------------------------------------------------------------------

#include "stdafx.h"

// Includes to make system vector
#include "System.h"
#include <vector>

// Include to communicate with window
#include "Window.h"

//-------------------------------------------------------------------------------------------------
// Forward References
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Constants
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Classes
//-------------------------------------------------------------------------------------------------

/*************************************************************************************************/
/*!
	\brief
		Singleton class that defines and manages the game engine.
*/
/*************************************************************************************************/
class Engine
{
public:
	//---------------------------------------------------------------------------------------------
	// Public Consts
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Public Structures
	//---------------------------------------------------------------------------------------------

	enum SystemTypes
	{
		window,
		inputManager,
		gameObjectManager,
		textureManager,
		sceneManager,
		effectManager,
		max
	};
	
	//---------------------------------------------------------------------------------------------
	// Public Variables
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Public Function Declarations
	//---------------------------------------------------------------------------------------------

	/*************************************************************************************************/
	/*!
		\brief
			Static function that creates the singleton game engine. Also will return the game engine
			reference

		\return
			Returns the game engine.
	*/
	/*************************************************************************************************/
	static Engine* createEngine();

	/*********************************************************************************************/
	/*!
		\brief
			Engine destructor.
	*/
	/*********************************************************************************************/
	~Engine();

	/*********************************************************************************************/
	/*!
		\brief
			Initializes the engine
	*/
	/*********************************************************************************************/
	void Init();

	/*********************************************************************************************/
	/*!
		\brief
			Updates the game engine. Also defines an in-engine frame
	*/
	/*********************************************************************************************/
	void Update();

	/*********************************************************************************************/
	/*!
		\brief
			Draws the engine updates to the screen.

		\param window_
			The window being drawn to
	*/
	/*************************************************************************************************/
	void Draw(Window* window_);

	/*********************************************************************************************/
	/*!
		\brief
			Shuts down the game engine
	*/
	/*********************************************************************************************/
	void Shutdown();

	/*********************************************************************************************/
	/*!
		\brief
			Gets a system from the system list of the given type

		\param systemType
			The given system type
	*/
	/*********************************************************************************************/
	System* GetSystem(SystemTypes systemType);
	
private:
	//---------------------------------------------------------------------------------------------
	// Private Consts
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Private Structures
	//---------------------------------------------------------------------------------------------
	
	//---------------------------------------------------------------------------------------------
	// Private Variables
	//---------------------------------------------------------------------------------------------
	
	static Engine* engineInstance;			// Points to the singleton engine instance

	std::vector<System *> systemList;		// Holds a list of all systems that need to be managed
	Window* gameWindow;						// Points to the window so the engine can communicate directly with the window

	double lastTime;						// Tracks the last recorded time for calculating dt
	double dt;								// The time (in seconds) since the previous frame

	//---------------------------------------------------------------------------------------------
	// Private Function Declarations
	//---------------------------------------------------------------------------------------------

	/*********************************************************************************************/
	/*!
		\brief
			Engine class initializer.
	*/
	/*********************************************************************************************/
	Engine();
};

//-------------------------------------------------------------------------------------------------
// Public Variables
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Functions
//-------------------------------------------------------------------------------------------------

#endif // Syncopatience_[FILL]_H_
