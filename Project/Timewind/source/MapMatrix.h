/*************************************************************************************************/
/*!
\file MapMatrix.h
\author Aiden Cvengros
\par email: ajcvengros\@gmail.com
\date 2024.6.21
\brief
    Manages the world map grid

    Public Functions:
        + System
		+ ~System
		+ Init
		+ Update
		+ Draw
		+ Shutdown
		
	Private Functions:

Copyright (c) 2023 Aiden Cvengros
*/
/*************************************************************************************************/

#ifndef Syncopatience_MapMatrix_H_
#define Syncopatience_MapMatrix_H_

#pragma once

//-------------------------------------------------------------------------------------------------
// Include Header Files
//-------------------------------------------------------------------------------------------------

#include "stdafx.h"

// The system base class
#include "System.h"

// The vectors that make up the map grid
#include <vector>

//-------------------------------------------------------------------------------------------------
// Forward References
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Constants
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Classes
//-------------------------------------------------------------------------------------------------

/*************************************************************************************************/
/*!
	\brief
		The map matrix class
*/
/*************************************************************************************************/
class MapMatrix : public System
{
public:
	//---------------------------------------------------------------------------------------------
	// Public Consts
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Public Structures
	//---------------------------------------------------------------------------------------------

	enum class TileStatus
	{
		Empty,
		Wall,
		Player,
		Max
	};

	//---------------------------------------------------------------------------------------------
	// Public Variables
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Public Function Declarations
	//---------------------------------------------------------------------------------------------

	/*************************************************************************************************/
	/*!
		\brief
			Constructor for the map matrix class

		\param
			The max width for maps

		\param
			The max height for maps
	*/
	/*************************************************************************************************/
	MapMatrix(int width, int height);

	/*************************************************************************************************/
	/*!
		\brief
			Destructor for the map matrix class
	*/
	/*************************************************************************************************/
	~MapMatrix();

	/*************************************************************************************************/
	/*!
		\brief
			Initializes the map matrix
	*/
	/*************************************************************************************************/
	void Init();

	/*************************************************************************************************/
	/*!
		\brief
			Updates the system. Virtual function that must be overwritten by derived class
	
		\param
			The time elapsed since the previous frame.
	*/
	/*************************************************************************************************/
	void Update(double dt) {}

	/*************************************************************************************************/
	/*!
		\brief
			Draws the map. Only used for debug purposes

		\param window
			The window being drawn to
	*/
	/*************************************************************************************************/
	void Draw(Window* window);

	/*************************************************************************************************/
	/*!
		\brief
			Shuts down the map matrix system
	*/
	/*************************************************************************************************/
	void Shutdown();

	/*************************************************************************************************/
	/*!
		\brief
			Clears the contents of the map
	*/
	/*************************************************************************************************/
	void Clear();

	/*************************************************************************************************/
	/*!
		\brief
			Sets the value of a given tile position

		\param xCoord
			The x coordinate of the tile to be changed

		\param yCoord
			The y coordinate of the tile to be changed

		\param newStatus
			The new state of the tile
	*/
	/*************************************************************************************************/
	void SetTile(int xCoord, int yCoord, TileStatus newStatus);

	/*************************************************************************************************/
	/*!
		\brief
			Moves the player to a specific position. Returns false if the move would be illegal

		\param xCoord
			The x coordinate of the tile to be changed

		\param yCoord
			The y coordinate of the tile to be changed

		\return
			Whether the player was moved successfully
	*/
	/*************************************************************************************************/
	bool SetPlayerPosition(int xCoord, int yCoord);

	/*************************************************************************************************/
	/*!
		\brief
			Moves the player to a specific position. Returns false if the move would be illegal

		\param posCoords
			The new position coordinates for the player

		\return
			Whether the player was moved successfully
	*/
	/*************************************************************************************************/
	bool SetPlayerPosition(std::pair<int, int> posCoords) { return SetPlayerPosition(posCoords.first, posCoords.second); }

	/*************************************************************************************************/
	/*!
		\brief
			Returns the tile's status

		\param xCoord
			The x coordinate of the tile to be checked

		\param yCoord
			The y coordinate of the tile to be checked

		\return
			The status of the given tile
	*/
	/*************************************************************************************************/
	TileStatus GetTile(int xCoord, int yCoord);

	/*************************************************************************************************/
	/*!
		\brief
			Returns the player's position

		\return
			The position of the player in the map grid
	*/
	/*************************************************************************************************/
	std::pair<int, int> GetPlayerPosition();

	/*************************************************************************************************/
	/*!
		\brief
			Returns that maximum width of the map grid

		\return
			The maximum width of the map grid
	*/
	/*************************************************************************************************/
	int GetMaxMapWidth();

	/*************************************************************************************************/
	/*!
		\brief
			Returns that maximum height of the map grid

		\return
			The maximum height of the map grid
	*/
	/*************************************************************************************************/
	int GetMaxMapHeight();

	/*************************************************************************************************/
	/*!
		\brief
			Returns that farthest left edge of the map

		\return
			The left-most edge of the map in world coordinates
	*/
	/*************************************************************************************************/
	float GetMinMapX() { return minX; }

	/*************************************************************************************************/
	/*!
		\brief
			Returns that lowest edge of the map

		\return
			The lowest of the map in world coordinates
	*/
	/*************************************************************************************************/
	float GetMinMapY() { return minY; }

private:
	//---------------------------------------------------------------------------------------------
	// Private Consts
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Private Structures
	//---------------------------------------------------------------------------------------------

	//---------------------------------------------------------------------------------------------
	// Private Variables
	//---------------------------------------------------------------------------------------------

	std::vector<std::vector<TileStatus>> mapMatrix;	// The map grid

	std::pair<int, int> playerPos;					// The position of the player

	float minX;										// The farthest left you can go
	float minY;										// The farthest down you can go (y is inverted btw)

	//---------------------------------------------------------------------------------------------
	// Private Function Declarations
	//---------------------------------------------------------------------------------------------
};

//-------------------------------------------------------------------------------------------------
// Public Variables
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Public Functions
//-------------------------------------------------------------------------------------------------

#endif // Syncopatience_MapMatrix_H_
